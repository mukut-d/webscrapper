stages:
  - build
  - deploy-stage

image: docker/compose:latest

services:
- docker:dind

variables:
  TARGET_DIR_PROD: ~/apps/sellerpundit-services
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

build:
  stage: build
  image: docker:18-git
  services:
    - docker:18-dind
  before_script:
    # - docker info
    # - apk update
    # - apk upgrade
    # - apk add curl jq python3 python3-dev build-base libffi-dev libressl-dev gettext
    # - curl -O https://bootstrap.pypa.io/get-pip.py
    # - python3 get-pip.py
    # - pip install docker-compose
    - chmod +x ./generate_env.sh
    - ./generate_env.sh
    - cat .env
  script:
    # login to docker
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # build and tag docker image
    - docker build --target production -t $TAG_COMMIT -t $TAG_LATEST .
    # publish finished image
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
  
deploy-stage:
  stage: deploy-stage
  image: alpine:latest
  # variables:
  #   DOCKER_COMPOSE_CMD: cd $TARGET_DIR_PROD && docker-compose
  script:
    - chmod og= $STAGE_ID_RSA
    - apk update && apk add openssh-client
    # stop existing docker container & remove images
    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "docker container rm -f $CI_PROJECT_NAME || true"
    # pull new container
    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "docker pull $TAG_COMMIT"
    # run new container
    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "docker run -d --restart unless-stopped --name $CI_PROJECT_NAME -p 3001:3001 -p 7001:7001 $TAG_COMMIT"